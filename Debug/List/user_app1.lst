###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        23/Sep/2017  15:09:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\EIE\Razor_Atmel-master\firmware_mpg_common\application\user_app1.c
#    Command line =  
#        D:\EIE\Razor_Atmel-master\firmware_mpg_common\application\user_app1.c
#        -D MPGL1 -D MPG1 --preprocess=cl
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\ -lC
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\ -o
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\EIE\Software\arm\INC\c\DLib_Config_Normal.h -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\ -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\bsp\ -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\drivers\ -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\application\ -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I
#        D:\EIE\Software\arm\CMSIS\Include\
#    List file    =  
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        D:\EIE\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

D:\EIE\Razor_Atmel-master\firmware_mpg_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp1_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4
     61          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserApp1Initialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserApp1Initialize(void)
     90          {
     91            /* If good initialization, set state to Idle */
     92            if( 1 )
     93            {
     94              UserApp1_StateMachine = UserApp1SM_Idle;
   \                     UserApp1Initialize: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000004   0x....             LDR.N    R1,??DataTable4
   \   00000006   0x6008             STR      R0,[R1, #+0]
     95            }
     96            else
     97            {
     98              /* The task isn't properly initialized, so shut it down and don't run */
     99              UserApp1_StateMachine = UserApp1SM_FailedInit;
    100            }
    101          
    102          } /* end UserApp1Initialize() */
   \   00000008   0x4770             BX       LR               ;; return
    103          
    104            
    105          /*----------------------------------------------------------------------------------------------------------------------
    106          Function UserApp1RunActiveState()
    107          
    108          Description:
    109          Selects and runs one iteration of the current state in the state machine.
    110          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    111          may take 1ms / n to execute.
    112          
    113          Requires:
    114            - State machine function pointer points at current state
    115          
    116          Promises:
    117            - Calls the function to pointed by the state machine function pointer
    118          */

   \                                 In section .text, align 2, keep-with-next
    119          void UserApp1RunActiveState(void)
    120          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121            UserApp1_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    122          
    123          } /* end UserApp1RunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    124          
    125          
    126          /*--------------------------------------------------------------------------------------------------------------------*/
    127          /* Private functions                                                                                                  */
    128          /*--------------------------------------------------------------------------------------------------------------------*/
    129          
    130          
    131          /**********************************************************************************************************************
    132          State Machine Function Definitions
    133          **********************************************************************************************************************/
    134          
    135          /*-------------------------------------------------------------------------------------------------------------------*/
    136          /* Wait for ??? */

   \                                 In section .text, align 2, keep-with-next
    137          static void UserApp1SM_state1(void)
    138          {
   \                     UserApp1SM_state1: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    139            u8 au8State1[] = "STATE 1";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable4_1
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    140            
    141            DebugPrintf("\n\rEntering state 1\n\r");
   \   00000010   0x....             LDR.N    R0,??DataTable4_2
   \   00000012   0x.... 0x....      BL       DebugPrintf
    142            LCDMessage(LINE1_START_ADDR, au8State1);
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       LCDMessage
    143            LCDClearChars(LINE1_START_ADDR+7, 13);
   \   0000001E   0x210D             MOVS     R1,#+13
   \   00000020   0x2007             MOVS     R0,#+7
   \   00000022   0x.... 0x....      BL       LCDClearChars
    144            LCDClearChars(LINE2_START_ADDR, 20);
   \   00000026   0x2114             MOVS     R1,#+20
   \   00000028   0x2040             MOVS     R0,#+64
   \   0000002A   0x.... 0x....      BL       LCDClearChars
    145            LedOff(GREEN);
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       LedOff
    146            LedOff(YELLOW);
   \   00000034   0x2005             MOVS     R0,#+5
   \   00000036   0x.... 0x....      BL       LedOff
    147            LedOff(ORANGE);
   \   0000003A   0x2006             MOVS     R0,#+6
   \   0000003C   0x.... 0x....      BL       LedOff
    148            LedOff(RED);
   \   00000040   0x2007             MOVS     R0,#+7
   \   00000042   0x.... 0x....      BL       LedOff
    149            LedOn(WHITE);
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       LedOn
    150            LedOn(PURPLE);
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      BL       LedOn
    151            LedOn(BLUE);
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x.... 0x....      BL       LedOn
    152            LedOn(CYAN);
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x.... 0x....      BL       LedOn
    153            LedOn(LCD_RED);
   \   0000005E   0x2008             MOVS     R0,#+8
   \   00000060   0x.... 0x....      BL       LedOn
    154            LedOff(LCD_GREEN);
   \   00000064   0x2009             MOVS     R0,#+9
   \   00000066   0x.... 0x....      BL       LedOff
    155            LedOn(LCD_BLUE);
   \   0000006A   0x200A             MOVS     R0,#+10
   \   0000006C   0x.... 0x....      BL       LedOn
    156          }
   \   00000070   0xBD07             POP      {R0-R2,PC}       ;; return
    157          

   \                                 In section .text, align 2, keep-with-next
    158          static void UserApp1SM_state2(void)
    159          {
   \                     UserApp1SM_state2: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    160            u8 au8State2[] = "STATE 2";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable4_3
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    161            
    162            DebugPrintf("\n\rEntering state 2\n\r");
   \   00000010   0x....             LDR.N    R0,??DataTable4_4
   \   00000012   0x.... 0x....      BL       DebugPrintf
    163            LCDMessage(LINE1_START_ADDR, au8State2);
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       LCDMessage
    164            LCDClearChars(LINE1_START_ADDR+7, 13);
   \   0000001E   0x210D             MOVS     R1,#+13
   \   00000020   0x2007             MOVS     R0,#+7
   \   00000022   0x.... 0x....      BL       LCDClearChars
    165            LCDClearChars(LINE2_START_ADDR, 20);
   \   00000026   0x2114             MOVS     R1,#+20
   \   00000028   0x2040             MOVS     R0,#+64
   \   0000002A   0x.... 0x....      BL       LCDClearChars
    166            LedOff(WHITE);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       LedOff
    167            LedOff(PURPLE);
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       LedOff
    168            LedOff(BLUE);
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x.... 0x....      BL       LedOff
    169            LedOff(CYAN);
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x.... 0x....      BL       LedOff
    170            LedOn(LCD_RED);
   \   00000046   0x2008             MOVS     R0,#+8
   \   00000048   0x.... 0x....      BL       LedOn
    171            LedBlink(GREEN, LED_1HZ);
   \   0000004C   0xF44F 0x71FA      MOV      R1,#+500
   \   00000050   0x2004             MOVS     R0,#+4
   \   00000052   0x.... 0x....      BL       LedBlink
    172            LedBlink(YELLOW, LED_2HZ);
   \   00000056   0x21FA             MOVS     R1,#+250
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0x.... 0x....      BL       LedBlink
    173            LedBlink(ORANGE, LED_4HZ);
   \   0000005E   0x217D             MOVS     R1,#+125
   \   00000060   0x2006             MOVS     R0,#+6
   \   00000062   0x.... 0x....      BL       LedBlink
    174            LedBlink(RED, LED_8HZ);
   \   00000066   0x213F             MOVS     R1,#+63
   \   00000068   0x2007             MOVS     R0,#+7
   \   0000006A   0x.... 0x....      BL       LedBlink
    175            LedOn(LCD_RED);
   \   0000006E   0x2008             MOVS     R0,#+8
   \   00000070   0x.... 0x....      BL       LedOn
    176            LedOff(LCD_BLUE);
   \   00000074   0x200A             MOVS     R0,#+10
   \   00000076   0x.... 0x....      BL       LedOff
    177            LedPWM(LCD_GREEN,LED_PWM_20);
   \   0000007A   0x2104             MOVS     R1,#+4
   \   0000007C   0x2009             MOVS     R0,#+9
   \   0000007E   0x.... 0x....      BL       LedPWM
    178          }
   \   00000082   0xBD07             POP      {R0-R2,PC}       ;; return
    179          

   \                                 In section .text, align 4, keep-with-next
    180          static void UserApp1SM_Idle(void)
    181          {
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    182            static u8 u8KeyValue=0;
    183            static  u16 u16Time=0;
    184            static  bool bIsOk=FALSE;
    185            static u8 au8DebugScanf[2];
    186            
    187            if(DebugScanf(au8DebugScanf))
   \   00000002   0x....             LDR.N    R0,??DataTable4_5
   \   00000004   0x.... 0x....      BL       DebugScanf
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD00D             BEQ.N    ??UserApp1SM_Idle_0
    188            {
    189                switch(au8DebugScanf[0])
   \   0000000C   0x....             LDR.N    R0,??DataTable4_5
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2831             CMP      R0,#+49
   \   00000012   0xD002             BEQ.N    ??UserApp1SM_Idle_1
   \   00000014   0x2832             CMP      R0,#+50
   \   00000016   0xD004             BEQ.N    ??UserApp1SM_Idle_2
   \   00000018   0xE006             B.N      ??UserApp1SM_Idle_3
    190                {
    191                    case '1':
    192                      u8KeyValue=1;
   \                     ??UserApp1SM_Idle_1: (+1)
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable4_6
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    193                      break;
   \   00000020   0xE002             B.N      ??UserApp1SM_Idle_0
    194                    case '2':
    195                      u8KeyValue=2;
   \                     ??UserApp1SM_Idle_2: (+1)
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x....             LDR.N    R1,??DataTable4_6
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    196                    default:
    197                      break;
    198                }
    199            }
    200            
    201            if( WasButtonPressed(BUTTON1) )
   \                     ??UserApp1SM_Idle_3: (+1)
   \                     ??UserApp1SM_Idle_0: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       WasButtonPressed
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD005             BEQ.N    ??UserApp1SM_Idle_4
    202            {
    203                ButtonAcknowledge(BUTTON1);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       ButtonAcknowledge
    204                u8KeyValue=1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable4_6
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    205            }
    206            
    207            if( WasButtonPressed(BUTTON2) )
   \                     ??UserApp1SM_Idle_4: (+1)
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       WasButtonPressed
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD005             BEQ.N    ??UserApp1SM_Idle_5
    208            {
    209                ButtonAcknowledge(BUTTON2);
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x.... 0x....      BL       ButtonAcknowledge
    210                u8KeyValue=2;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x....             LDR.N    R1,??DataTable4_6
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    211            }
    212            
    213            switch(u8KeyValue)
   \                     ??UserApp1SM_Idle_5: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable4_6
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD002             BEQ.N    ??UserApp1SM_Idle_6
   \   0000005C   0x2802             CMP      R0,#+2
   \   0000005E   0xD00C             BEQ.N    ??UserApp1SM_Idle_7
   \   00000060   0xE014             B.N      ??UserApp1SM_Idle_8
    214            {
    215                case 1:
    216                  bIsOk=FALSE;
   \                     ??UserApp1SM_Idle_6: (+1)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable4_7
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    217                  UserApp1SM_state1();
   \   00000068   0x.... 0x....      BL       UserApp1SM_state1
    218                  PWMAudioOff(BUZZER1);
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      BL       PWMAudioOff
    219                  u8KeyValue=0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x....             LDR.N    R1,??DataTable4_6
   \   00000076   0x7008             STRB     R0,[R1, #+0]
    220                      break;
   \   00000078   0xE008             B.N      ??UserApp1SM_Idle_9
    221                      
    222                case 2:
    223                  bIsOk=TRUE;
   \                     ??UserApp1SM_Idle_7: (+1)
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x....             LDR.N    R1,??DataTable4_7
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    224                  UserApp1SM_state2();
   \   00000080   0x.... 0x....      BL       UserApp1SM_state2
    225                  u8KeyValue=0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR.N    R1,??DataTable4_6
   \   00000088   0x7008             STRB     R0,[R1, #+0]
    226                    break;
   \   0000008A   0xE7FF             B.N      ??UserApp1SM_Idle_9
    227                 default:
    228                   break;
    229            }
    230            
    231            if(bIsOk)
   \                     ??UserApp1SM_Idle_8: (+1)
   \                     ??UserApp1SM_Idle_9: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable4_7
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD023             BEQ.N    ??UserApp1SM_Idle_10
    232            {
    233                u16Time++;
   \   00000094   0x....             LDR.N    R0,??DataTable4_8
   \   00000096   0x8800             LDRH     R0,[R0, #+0]
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable4_8
   \   0000009C   0x8008             STRH     R0,[R1, #+0]
    234                if(u16Time>0&&u16Time<=100)
   \   0000009E   0x....             LDR.N    R0,??DataTable4_8
   \   000000A0   0x8800             LDRH     R0,[R0, #+0]
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD00B             BEQ.N    ??UserApp1SM_Idle_11
   \   000000A6   0x....             LDR.N    R0,??DataTable4_8
   \   000000A8   0x8800             LDRH     R0,[R0, #+0]
   \   000000AA   0x2865             CMP      R0,#+101
   \   000000AC   0xDA07             BGE.N    ??UserApp1SM_Idle_11
    235                {
    236                    PWMAudioSetFrequency(BUZZER1, 200);
   \   000000AE   0x21C8             MOVS     R1,#+200
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       PWMAudioSetFrequency
    237                    PWMAudioOn(BUZZER1);
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0x.... 0x....      BL       PWMAudioOn
   \   000000BC   0xE00E             B.N      ??UserApp1SM_Idle_10
    238                }
    239                else if(u16Time>100)
   \                     ??UserApp1SM_Idle_11: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable4_8
   \   000000C0   0x8800             LDRH     R0,[R0, #+0]
   \   000000C2   0x2865             CMP      R0,#+101
   \   000000C4   0xDB0A             BLT.N    ??UserApp1SM_Idle_10
    240                {
    241                    PWMAudioOff(BUZZER1);
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0x.... 0x....      BL       PWMAudioOff
    242                    if(u16Time==1000)
   \   000000CC   0x....             LDR.N    R0,??DataTable4_8
   \   000000CE   0x8800             LDRH     R0,[R0, #+0]
   \   000000D0   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000D4   0xD102             BNE.N    ??UserApp1SM_Idle_10
    243                    {
    244                        u16Time=0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x....             LDR.N    R1,??DataTable4_8
   \   000000DA   0x8008             STRH     R0,[R1, #+0]
    245                    }
    246                }
    247            }
    248              
    249          } /* end UserApp1SM_Idle() */
   \                     ??UserApp1SM_Idle_10: (+1)
   \   000000DC   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??u8KeyValue:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     ??u16Time:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??bIsOk:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     ??au8DebugScanf:
   \   00000000                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ??au8DebugScanf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ??u8KeyValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ??bIsOk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ??u16Time

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x54          DC8 "STATE 1"
   \              0x41 0x54    
   \              0x45 0x20    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0A 0x0D          DC8 "\012\015Entering state 1\012\015"
   \              0x45 0x6E    
   \              0x74 0x65    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x31    
   \              0x0A 0x0D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x53 0x54          DC8 "STATE 2"
   \              0x41 0x54    
   \              0x45 0x20    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0A 0x0D          DC8 "\012\015Entering state 2\012\015"
   \              0x45 0x6E    
   \              0x74 0x65    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x32    
   \              0x0A 0x0D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    250               
    251          #if 0
    252          /*-------------------------------------------------------------------------------------------------------------------*/
    253          /* Handle an error */
    254          static void UserApp1SM_Error(void)          
    255          {
    256            
    257          } /* end UserApp1SM_Error() */
    258          #endif
    259          
    260          
    261          /*-------------------------------------------------------------------------------------------------------------------*/
    262          /* State to sit in if init failed */
    263          static void UserApp1SM_FailedInit(void)          
    264          {
    265              
    266          } /* end UserApp1SM_FailedInit() */
    267          
    268          
    269          /*--------------------------------------------------------------------------------------------------------------------*/
    270          /* End of File                                                                                                        */
    271          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   UserApp1Initialize
       8   UserApp1RunActiveState
         8   -- Indirect call
       8   UserApp1SM_Idle
         8   -> ButtonAcknowledge
         8   -> DebugScanf
         8   -> PWMAudioOff
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency
         8   -> UserApp1SM_state1
         8   -> UserApp1SM_state2
         8   -> WasButtonPressed
      16   UserApp1SM_state1
        16   -> DebugPrintf
        16   -> LCDClearChars
        16   -> LCDMessage
        16   -> LedOff
        16   -> LedOn
      16   UserApp1SM_state2
        16   -> DebugPrintf
        16   -> LCDClearChars
        16   -> LCDMessage
        16   -> LedBlink
        16   -> LedOff
        16   -> LedOn
        16   -> LedPWM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       8  ?_0
      24  ?_1
       8  ?_2
      24  ?_3
       4  G_u32UserApp1Flags
      10  UserApp1Initialize
      10  UserApp1RunActiveState
     222  UserApp1SM_Idle
     114  UserApp1SM_state1
     132  UserApp1SM_state2
       4  UserApp1_StateMachine
       2  au8DebugScanf
       1  bIsOk
       2  u16Time
       1  u8KeyValue

 
  14 bytes in section .bss
  64 bytes in section .rodata
 524 bytes in section .text
 
 524 bytes of CODE  memory
  64 bytes of CONST memory
  14 bytes of DATA  memory

Errors: none
Warnings: none
